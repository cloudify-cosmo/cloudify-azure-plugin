###########################################################
# This Blueprint installs the nodecellar application
# on a microsoft azure cloud environment.
###########################################################

tosca_definitions_version: cloudify_dsl_1_1

imports:
  - http://www.getcloudify.org/spec/cloudify/3.2.1/types.yaml
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-azure-plugin/master/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.2.1/plugin.yaml
  - types/nodecellar.yaml

#####################################################################################
# inputs section allows the user to use same
# blueprint for creating different deployments, each one
# with its own parameters.
# to specify deployment inputs run:
#   - cfy deployments create -b <blueprint_id> -d <deployment_id> -i inputs.json
#####################################################################################

inputs:
  subscription_id:
    type: string
    default: ''

  location:
    type: string
    default: 'West US'  

  vm_prefix:
    type: string
    default: 'cfy'

  vm_size: 
    type: string
    default: 'Standard_A2'
  
  image_reference_offer:
    type: string
    default: 'UbuntuServer'
    
  image_reference_publisher:
    type: string
    default: 'Canonical'
    
  image_reference_sku:
    type: string
    default: '14.04.2-LTS'
    
  use_external_resource:
    type: boolean
    default: false

  existing_resource_group_name:
    type: string
    default: ''
    
  existing_security_group_name:
    type: string
    default: ''

  existing_storage_account_name:
    type: string
    default: ''

  existing_vnet_name:
    type: string
    default: ''

  existing_public_ip_name:
    type: string
    default: ''

  existing_nic_name:
    type: string
    default: ''

  key_data:
    type: string
    default: ''

  ssh_key_path:
    type: string
    default: '~/.ssh/id_rsa'

  client_id:
    type: string
    default: ''

  tenant_id:
    type: string
    default: ''

  ssh_username:
    type: string
    default: ''
  
  aad_password:
    type: string
    default: ''

  agents_user:
    type: string
    default: 'azuretest' 

node_types:

  ###########################################################
  # We define a type that inherits microsoft azure's default
  # server, and adds monitoring capabillities on top of it.
  ###########################################################

  nodecellar.nodes.MonitoredServer:
    derived_from: cloudify.azure.nodes.Server
    properties:
      vm_prefix:
        default: { get_input: vm_prefix }
      image_reference_offer:
        default: { get_input: image_reference_offer}
      image_reference_publisher:
        default: { get_input: image_reference_publisher}
      image_reference_sku:
        default: { get_input: image_reference_sku}
      vm_size:
        default: { get_input: vm_size}
      key_data:
        default: { get_input: key_data}
      subscription_id:
        default: { get_input: subscription_id}
      location:
        default: { get_input: location }
      client_id: 
        default: { get_input: client_id}
      tenant_id:
        default: { get_input: tenant_id}
      ssh_username:
        default: { get_input: ssh_username}
      aad_password:
        default: { get_input: aad_password}
      install_agent: 
        default: true

    interfaces:

      ###########################################################
      # We are infact telling cloudify to install a diamond
      # monitoring agent on the server.
      #
      # (see https://github.com/BrightcoveOS/Diamond)
      ###########################################################

      cloudify.interfaces.monitoring_agent:
          install:
            implementation: diamond.diamond_agent.tasks.install
            inputs:
              diamond_config:
                default:
                  interval: 1
          start: diamond.diamond_agent.tasks.start
          stop: diamond.diamond_agent.tasks.stop
          uninstall: diamond.diamond_agent.tasks.uninstall

      ###########################################################
      # Adding some collectors. These collectors are necessary
      # for the Cloudify UI to display the deafult metrics.
      ###########################################################

      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                default:
                  CPUCollector: {}
                  MemoryCollector: {}
                  LoadAverageCollector: {}
                  DiskUsageCollector:
                    config:
                      devices: x?vd[a-z]+[0-9]*$
                  NetworkCollector: {}

node_templates:

  mongod_host:
    type: nodecellar.nodes.MonitoredServer
    relationships:
      - target: mongod_nic
        type: cloudify.azure.relationships.server_connected_to_nic
      - target: azure_token
        type: cloudify.azure.relationships.resource_connected_to_azure_token

  nodejs_host:
    type: nodecellar.nodes.MonitoredServer
    relationships:
      - target: nodejs_nic
        type: cloudify.azure.relationships.server_connected_to_nic
      - target: azure_token
        type: cloudify.azure.relationships.resource_connected_to_azure_token

  nodecellar_resource_group:
    type: cloudify.azure.nodes.ResourceGroup
    properties:
      location: { get_input: location}
      subscription_id: { get_input: subscription_id}
      client_id: { get_input: client_id}
      tenant_id: { get_input: tenant_id}
      aad_password: { get_input: aad_password}
      use_external_resource: { get_input: use_external_resource}
      existing_resource_group_name: { get_input: existing_resource_group_name}
      
    relationships:
      - target: azure_token
        type: cloudify.azure.relationships.resource_connected_to_azure_token
     
  nodecellar_storage_account:
    type: cloudify.azure.nodes.StorageAccount
    properties:
      location: { get_input: location}
      subscription_id: { get_input: subscription_id}
      client_id: { get_input: client_id}
      tenant_id: { get_input: tenant_id}
      aad_password: { get_input: aad_password}
      use_external_resource: { get_input: use_external_resource}
      existing_storage_account_name: { get_input: existing_storage_account_name}
      
    relationships:
      - target: nodecellar_resource_group
        type: cloudify.azure.relationships.storage_account_connected_to_resource_group
      - target: azure_token
        type: cloudify.azure.relationships.resource_connected_to_azure_token

  nodejs_public_ip:
    type: cloudify.azure.nodes.PublicIP
    properties:
      location: { get_input: location}
      subscription_id: { get_input: subscription_id}
      client_id: { get_input: client_id}
      tenant_id: { get_input: tenant_id}
      aad_password: { get_input: aad_password}
      use_external_resource: { get_input: use_external_resource}
      existing_public_ip_name: { get_input: existing_public_ip_name}
      
    relationships:
      - target: nodejs_vnet
        type: cloudify.azure.relationships.public_ip_connected_to_vnet
      - target: azure_token
        type: cloudify.azure.relationships.resource_connected_to_azure_token

  nodejs_nic:
    type: cloudify.azure.nodes.NIC
    properties:
      location: { get_input: location}
      subscription_id: { get_input: subscription_id}
      client_id: { get_input: client_id}
      tenant_id: { get_input: tenant_id}
      aad_password: { get_input: aad_password}
      use_external_resource: { get_input: use_external_resource}
      existing_nic_name: { get_input: existing_nic_name}
      
    relationships:
      - target: nodejs_public_ip
        type: cloudify.azure.relationships.nic_connected_to_public_ip
      - target: azure_token
        type: cloudify.azure.relationships.resource_connected_to_azure_token

  mongod_nic:
    type: cloudify.azure.nodes.NIC
    properties:
      location: { get_input: location}
      subscription_id: { get_input: subscription_id}
      client_id: { get_input: client_id}
      tenant_id: { get_input: tenant_id}
      aad_password: { get_input: aad_password}
      use_external_resource: { get_input: use_external_resource}
      existing_nic_name: { get_input: existing_nic_name}
      
    relationships:
      - target: mongod_vnet
        type: cloudify.azure.relationships.nic_connected_to_vnet
      - target: azure_token
        type: cloudify.azure.relationships.resource_connected_to_azure_token

  mongod_vnet:
    type: cloudify.azure.nodes.VNET
    properties:
      location: { get_input: location}
      subscription_id: { get_input: subscription_id}
      client_id: { get_input: client_id}
      tenant_id: { get_input: tenant_id}
      aad_password: { get_input: aad_password}
      use_external_resource: { get_input: use_external_resource}
      existing_vnet_name: { get_input: existing_vnet_name}
      
    relationships:
      - target: nodecellar_storage_account
        type: cloudify.azure.relationships.vnet_connected_to_storage_account
      - target: azure_token
        type: cloudify.azure.relationships.resource_connected_to_azure_token

  nodejs_vnet:
    type: cloudify.azure.nodes.VNET
    properties:
      location: { get_input: location}
      subscription_id: { get_input: subscription_id}
      client_id: { get_input: client_id}
      tenant_id: { get_input: tenant_id}
      aad_password: { get_input: aad_password}
      use_external_resource: { get_input: use_external_resource}
      existing_vnet_name: { get_input: existing_vnet_name}
      
    relationships:
      - target: nodecellar_storage_account
        type: cloudify.azure.relationships.vnet_connected_to_storage_account
      - target: azure_token
        type: cloudify.azure.relationships.resource_connected_to_azure_token
        
  azure_token:
    type: cloudify.azure.nodes.azure_token
    properties:
      client_id: { get_input: client_id }
      tenant_id: { get_input: tenant_id }
      aad_password: { get_input: aad_password }

  mongod:
    type: nodecellar.nodes.MongoDatabase
    properties:
      port: 27017
    interfaces:
      cloudify.interfaces.lifecycle:

        ###########################################################
        # The MongoDBCollector depends on a python library called
        # pymongo. We install this library in the 'configure'
        # lifecycle hook of this node.
        ###########################################################

        configure: scripts/mongo/install-pymongo.sh

      ###########################################################
      # Notice that this node defines an additional collector
      # to collect data on the MongoDB.
      ###########################################################

      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                MongoDBCollector:
                  config:
                    hosts: "localhost:27017"
    relationships:
      - type: cloudify.relationships.contained_in
        target: mongod_host

  nodejs:
    type: nodecellar.nodes.NodeJSServer
    relationships:
      - type: cloudify.relationships.contained_in
        target: nodejs_host

  nodecellar:
    type: nodecellar.nodes.NodecellarApplicationModule
    properties:
      port: 8080
    relationships:

      ################################
      # Setting the mongo connection
      ################################

      - type: node_connected_to_mongo
        target: mongod

      ################################
      # Setting the nodejs connection
      ################################

      - type: node_contained_in_nodejs
        target: nodejs


###########################################################
# This outputs section exposes the application endpoint.
# You can access it by running:
#   - cfy deployments -d <deployment_id> outputs
###########################################################

outputs:
  endpoint:
    description: Web application endpoint
    value:
      ip_address: { get_attribute: [nodejs_host, public_ip] }
      port: { get_property: [nodecellar, port] }
