tosca_definitions_version: cloudify_dsl_1_2

imports:
  - http://www.getcloudify.org/spec/cloudify/3.3.1/types.yaml
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-azure-plugin/master/plugin.yaml

inputs:
  
  subscription_id:
    type: string
    default: ''

  location:
    type: string
    default: 'West US'

  vm_prefix_ubuntu:
    type: string
    default: 'cfy'

  vm_prefix_centos:
    type: string
    default: 'cfy'

  vm_size_ubuntu: 
    type: string
    default: 'Standard_A2'

  vm_size_centos: 
    type: string
    default: 'Standard_A2'
  
  image_reference_offer_ubuntu:
    type: string
    default: 'UbuntuServer'
    
  image_reference_publisher_ubuntu:
    type: string
    default: 'Canonical'
    
  image_reference_sku_ubuntu:
    type: string
    default: '12.04.2-LTS'

  image_reference_offer_centos:
    type: string
    default: 'CentOS'
    
  image_reference_publisher_centos:
    type: string
    default: 'OpenLogic'
    
  image_reference_sku_centos:
    type: string
    default: '7.0'

  dns_server_domain_name:
    description: The domain name for which you want your server to be authorized for. For ex- abc.org etc
    type: string

  dns_server_domain_network:
    description: The private network for your domain
    type: string

  use_external_resource:
    type: boolean
    
  existing_security_group_name:
    type: string
    default: ''

  existing_storage_account_name:
    type: string
    default: ''

  clustered_dns_vnet_name:
    type: string
    default: ''

  clustered_dns_subnet_name:
    type: string
    default: ''

  existing_public_ip_name:
    type: string
    default: ''

  existing_nic_name:
    type: string
    default: ''

  key_data:
    type: string
    default: ''

  ssh_key_path:
    type: string
    default: '~/.ssh/id_rsa'

  client_id:
    type: string
    default: ''

  tenant_id:
    type: string
    default: ''

  ssh_username:
    type: string
    default: ''

  aad_password:
    type: string
    default: ''

  agents_user:
    type: string
    default: 'azuretest' 
   
  nic_name:
    type: string
    default: '' 

  host_name_1: 
    type: string
    default: ''

  ip_address_1: 
    type: string
    default: ''

node_templates:

  dns_host:
    type: cloudify.azure.nodes.ServerWithNic    
    properties:
      image_reference_offer: { get_input: image_reference_offer_ubuntu}
      image_reference_publisher: { get_input: image_reference_publisher_ubuntu}
      image_reference_sku: { get_input: image_reference_sku_ubuntu}
      vm_prefix: { get_input: vm_prefix_ubuntu}      
      vm_size: { get_input: vm_size_ubuntu}
      key_data: { get_input: key_data}
      subscription_id: { get_input: subscription_id}
      location: { get_input: location }
      client_id: { get_input: client_id}
      tenant_id: { get_input: tenant_id}
      ssh_username: { get_input: ssh_username}
      aad_password: { get_input: aad_password}
      nic_name: { get_input: nic_name}
    instances: {deploy: 2}
    relationships:
      - target: dns_nic
        type: cloudify.azure.relationships.server_connected_to_nic
      - target: clustered_dns_storage_account
        type: cloudify.azure.relationships.server_connected_to_storage_account
      - target: azure_token
        type: cloudify.azure.relationships.resource_depends_on_azure_token
      - target: clustered_dns_resource_group        
        type: cloudify.azure.relationships.resource_contained_in_resource_group

  dns_app_server:
    type: cloudify.azure.nodes.SoftwareComponent        
    interfaces:
       cloudify.interfaces.lifecycle:
         create: clustered-dns-scripts/dns_install.sh
         configure:
           implementation: clustered-dns-scripts/configure.py
           inputs:
             process:
               args: [{get_input: dns_server_domain_name}, {get_attribute: [dns_host, ip]}]
         start: 
           implementation: clustered-dns-scripts/tasks.py
           inputs:
             process:
               args: [{get_input: host_name_1}, {get_input: ip_address_1}, {get_input: dns_server_domain_name}]
         stop: clustered-dns-scripts/dns_stop.sh
         delete: clustered-dns-scripts/dns_uninstall.sh
       cloudify.interfaces.validation:
         creation: 
           implementation: clustered-dns-scripts/check_to_accept_user_network.py
           inputs: 
             process:
               args: [{get_input: dns_server_domain_network}]
    relationships:
      - target: dns_host
        type: dns_app_server_contained_in_dns_host
       

  pen_host:
    type: cloudify.azure.nodes.Server
    properties:
      image_reference_offer: { get_input: image_reference_offer_centos}
      image_reference_publisher: { get_input: image_reference_publisher_centos}
      image_reference_sku: { get_input: image_reference_sku_centos}
      vm_prefix: { get_input: vm_prefix_centos}
      vm_size: { get_input: vm_size_centos}
      key_data: { get_input: key_data}
      subscription_id: { get_input: subscription_id}
      location: { get_input: location }
      client_id: { get_input: client_id}
      tenant_id: { get_input: tenant_id}
      ssh_username: { get_input: ssh_username}
      aad_password: { get_input: aad_password}
    relationships:
      - target: pen_nic
        type: cloudify.azure.relationships.server_connected_to_nic
      - target: clustered_dns_storage_account
        type: cloudify.azure.relationships.server_connected_to_storage_account
      - target: azure_token
        type: cloudify.azure.relationships.resource_depends_on_azure_token
      - target: clustered_dns_resource_group
        type: cloudify.azure.relationships.resource_contained_in_resource_group

  pen_app_server:
    type: cloudify.azure.nodes.SoftwareComponent
    interfaces:
       cloudify.interfaces.lifecycle:
         create: cloudify_pen/pen_install.sh
         configure:
           implementation: cloudify_pen/add_node.py
           inputs:
             process:
               args: [{get_attribute: [dns_host, ip]}]
         start: cloudify_pen/pen_start.py
         stop: cloudify_pen/pen_stop.py
         delete: cloudify_pen/pen_uninstall.py
    relationships:
      - target: pen_host
        type: pen_app_server_contained_in_pen_host
       
  azure_token:
    type: cloudify.azure.nodes.azure_token
    properties:
      client_id: { get_input: client_id }
      tenant_id: { get_input: tenant_id }
      aad_password: { get_input: aad_password }

  clustered_dns_vnet:
    type: cloudify.azure.nodes.VNET
    properties:
      location: { get_input: location}
      subscription_id: { get_input: subscription_id}
      client_id: { get_input: client_id}
      tenant_id: { get_input: tenant_id}
      aad_password: { get_input: aad_password}
      use_external_resource: true
      clustered_dns_vnet: { get_input: clustered_dns_vnet_name}
      subnet: { get_input: clustered_dns_subnet_name}      
    relationships:
      - target: azure_token
        type: cloudify.azure.relationships.resource_depends_on_azure_token
      - target: clustered_dns_resource_group
        type: cloudify.azure.relationships.vnet_contained_in_resource_group

  pen_nic:
    type: cloudify.azure.nodes.NIC
    properties:
      location: { get_input: location}
      subscription_id: { get_input: subscription_id}
      client_id: { get_input: client_id}
      tenant_id: { get_input: tenant_id}
      aad_password: { get_input: aad_password}
      use_external_resource: { get_input: use_external_resource}
      existing_nic_name: { get_input: existing_nic_name}      
    relationships:
      - target: pen_public_ip
        type: cloudify.azure.relationships.nic_connected_to_public_ip
      - target: azure_token
        type: cloudify.azure.relationships.resource_depends_on_azure_token
      - target: clustered_dns_resource_group
        type: cloudify.azure.relationships.resource_contained_in_resource_group

  dns_nic:
    type: cloudify.azure.nodes.NIC
    properties:
      location: { get_input: location}
      subscription_id: { get_input: subscription_id}
      client_id: { get_input: client_id}
      tenant_id: { get_input: tenant_id}
      aad_password: { get_input: aad_password}
      use_external_resource: { get_input: use_external_resource}
      existing_nic_name: { get_input: existing_nic_name}      
    relationships:
      - target: clustered_dns_vnet
        type: cloudify.azure.relationships.nic_connected_to_vnet
      - target: azure_token
        type: cloudify.azure.relationships.resource_depends_on_azure_token
      - target: clustered_dns_resource_group
        type: cloudify.azure.relationships.resource_contained_in_resource_group

  pen_public_ip:
    type: cloudify.azure.nodes.PublicIP
    properties:
      location: { get_input: location}
      subscription_id: { get_input: subscription_id}
      client_id: { get_input: client_id}
      tenant_id: { get_input: tenant_id}
      aad_password: { get_input: aad_password}
      use_external_resource: { get_input: use_external_resource}
      existing_public_ip_name: { get_input: existing_public_ip_name}

    relationships:
      - target: clustered_dns_vnet
        type: cloudify.azure.relationships.public_ip_connected_to_vnet
      - target: azure_token
        type: cloudify.azure.relationships.resource_depends_on_azure_token
      - target: clustered_dns_resource_group
        type: cloudify.azure.relationships.resource_contained_in_resource_group

  clustered_dns_resource_group:
    type: cloudify.azure.nodes.ResourceGroup
    properties:
      location: { get_input: location}
      subscription_id: { get_input: subscription_id}
      client_id: { get_input: client_id}
      tenant_id: { get_input: tenant_id}
      aad_password: { get_input: aad_password}
      use_external_resource: true
      existing_resource_group_name: { get_input: existing_resource_group_name}

    relationships:
      - target: azure_token
        type: cloudify.azure.relationships.resource_depends_on_azure_token

  clustered_dns_storage_account:
    type: cloudify.azure.nodes.StorageAccount
    properties:
      location: { get_input: location}
      subscription_id: { get_input: subscription_id}
      client_id: { get_input: client_id}
      tenant_id: { get_input: tenant_id}
      aad_password: { get_input: aad_password}
      use_external_resource: true
      existing_storage_account_name: { get_input: existing_storage_account_name}

    relationships:
      - target: clustered_dns_resource_group
        type: cloudify.azure.relationships.storage_account_contained_in_resource_group
      - target: azure_token
        type: cloudify.azure.relationships.resource_depends_on_azure_token

relationships:

    dns_app_server_contained_in_dns_host:
      derived_from: cloudify.relationships.contained_in
      source_interfaces:
        cloudify.interfaces.relationship_lifecycle:
           postconfigure: 
             implementation: clustered-dns-scripts/cloudify_dns/creatingZones.py
             inputs:
               process:
                 args: [{get_input: dns_server_domain_name}, {get_attribute: [dns_host, ip]}]
